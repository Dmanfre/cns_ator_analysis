pts_diff = TeamScore - OpponentScore)
logs18_24 %>%
filter(TeamFull == "Maryland Terrapins", Season == "2022-2023") %>%
mutate(team_ator = (TeamAssists)/(TeamTurnovers),
opp_ator = (OpponentAssists)/(OpponentTurnovers),
pts_diff = TeamScore - OpponentScore)
logs18_24 <- logs18_24 %>%
mutate(
winloss = case_when(
grepl("W", W_L) ~ 1,
grepl("L", W_L) ~ 0),
team_ator = (TeamAssists) / (TeamTurnovers),
opp_ator = (OpponentAssists) / (OpponentTurnovers),
pts_diff = TeamScore - OpponentScore)
logs22_23 %>%
group_by(TeamFull = loser) %>%
summarise(losses = n()) %>%
arrange(desc(losses))
logs18_24 %>%
group_by(TeamFull = loser) %>%
summarise(losses = n()) %>%
arrange(desc(losses))
logs22_23 %>%
select(Season, Date, TeamFull, Confernece, Opponent, TeamScore, OpponentScore, W_L, TeamAssists, TeamTurnovers, OpponentAssists, OpponenetTurnovers, team_ator, opp_ator, pts_diff)
logs18_24 %>%
select(Season, Date, TeamFull, Confernece, Opponent, TeamScore, OpponentScore, W_L, TeamAssists, TeamTurnovers, OpponentAssists, OpponenetTurnovers, team_ator, opp_ator, pts_diff)
logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, W_L, TeamAssists, TeamTurnovers, OpponentAssists, OpponenetTurnovers, team_ator, opp_ator, pts_diff)
logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, W_L, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator, pts_diff)
logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator, pts_diff)
setwd("~/Documents/GitHub/cns_ator_analysis")
logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, pts_diff, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator)
ator_only <- logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, pts_diff, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator)
ator_only %>%
group_by(TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss))
ator_only %>%
group_by(Season, TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss))
ator_only %>%
filter(TeamFull == "Maryland Terrapins") %>%
group_by(Season, TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss))
season_ator <- ator_only %>%
group_by(Season, TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss))
View(ator_only)
View(season_ator)
library(tidyverse)
library(ggrepel)
library(janitor)
logs18_24 <- read.csv("https://thescoop.org/sports-data-files/wbblogs1824.csv")
#62,584 records ovver 2018-present
power_5 <- c("ACC", "Big 12", "Big Ten", "Pac-12", "SEC")
logs18_24 %>%
get_dupes(Date, TeamFull)
#Getting rid of records where an ator cannot be generated
logs18_24 <- logs18_24 %>%
filter(!is.na(TeamAssists) & !is.na(TeamTurnovers) & !is.na(OpponentAssists) & !is.na(OpponentTurnovers))
logs18_24 <- logs18_24 %>%
mutate(
winloss = case_when(
grepl("W", W_L) ~ 1,
grepl("L", W_L) ~ 0),
team_ator = (TeamAssists) / (TeamTurnovers),
opp_ator = (OpponentAssists) / (OpponentTurnovers),
pts_diff = TeamScore - OpponentScore)
ator_only <- logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, pts_diff, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator)
season_ator <- ator_only %>%
group_by(Season, TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss))
# To filter for a specific team, inster this: filter(TeamFull == "team_name")
View(season_ator)
View(ator_only)
View(season_ator)
ator_only %>%
filter(Conference %in% power_5)
ator_only %>%
distinct(Conference)
logs18_24 %>%
str_replace(Conference, "WBB", "")
logs18_24 %>%
str_replace(Conference, "WBB", " ")
logs18_24 %>%
str_replace(Conference, " WBB$", "")
logs18_24 %>%
str_replace(Conference, " WBB$", "")
cleaned_conferences <- str_replace(Conference, " WBB$", "")
cleaned_conferences <- str_replace(logs18_24, " WBB$Conference", "")
rm(list="cleaned_conferences")
sub(" WBB", "", logs18_24$Conference)
logs18_24$Conference <- sub(" WBB", "", logs18_24$Conference)
logs18_24$Conference <- sub(" WBB", "", logs18_24$Conference)
logs18_24$Conference <- sub(" WBB", "", logs18_24$Conference)
View(logs18_24)
ator_only %>%
filter(Conference %in% power_5)
ator_only <- logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, pts_diff, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator)
season_ator <- ator_only %>%
group_by(Season, TeamFull) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss)
)
View(ator_only)
power_5 <- c("ACC", "Big 12", "Big Ten", "Pac-12", "SEC")
ator_only %>%
filter(Conference %in% power_5)
ator_only %>%
filter(Conference %in% power_5) %>%
distinct(Conference)
#filtering for the ators I want
p5_teams <- season_ator %>%
filter(winning_conference %in% power_5)
#filtering for the ators I want
p5_teams <- season_ator %>%
filter(Conference %in% power_5)
ator_only %>%
group_by(Season, TeamFull, Conference) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss)
)
season_ator <- ator_only %>%
group_by(Season, TeamFull, Conference) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss)
)
#filtering for the ators I want
p5_teams <- season_ator %>%
filter(Conference %in% power_5)
b10 <- season_ator %>%
filter(TeamFull %in% big_ten)
b10 <- season_ator %>%
filter(Conference %in% big_ten)
b10 <- season_ator %>%
filter(Conference == "Big Ten")
View(b10)
season_ator %>%
filter(Conference == "Big Ten" | Season == "2022-2023")
season_ator %>%
filter(Conference == "Big Ten", Season == "2022-2023")
season_ator %>%
filter(TeamFull == "Rider Broncs")
ator_only %>%
filter(TeamFull == "Rider Broncs")
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator)) +
```
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+           geom_point(data=b10, aes(x=total_wins, y=season_ator, label=team))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+           geom_point(data=b10, aes(x=total_wins, y=season_ator, label=TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+           geom_point(data=b10, aes(x=total_wins, y=season_team_ator, label=TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator), label = TeamFull)
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))
umd <- season_ator %>%
filter(TeamFull == "Maryland Terrapins")
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator)+
geom_point(data = umd, aes(x = total_wins, y = season_ator), color = "red"))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator)+
geom_point(data = umd, aes(x = total_wins, y = season_team_ator), color = "red"))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator)+
geom_point(data = umd, aes(x = total_wins, y = season_team_ator), color = "red"))
ggplot() +
geom_point(data = umd, aes(x = total_wins, y = season_team_ator), color = "red")+
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
ggplot()
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
View(umd)
umd <- ator_only %>%
filter(TeamFull == "Maryland Terrapins")
View(umd)
View(b10)
View(p5_teams)
b10 <- ator_only %>%
filter(Conference == "Big Ten", Season == "2022-2023")
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
library(tidyverse)
library(ggrepel)
library(janitor)
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
b10 <- season_ator %>%
filter(Conference == "Big Ten", Season == "2022-2023")
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator, label=TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))
ggplot(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull)) +
geom_point() +
geom_text(aes(label = TeamFull), vjust = 1, hjust = 1)  # Add geom_text to display labels
ggplot(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull)) +
geom_point() +
geom_text(aes(label = TeamFull), vjust = 1, hjust = 1)  # Add geom_text to display labels
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_ator, label = TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))
ggplot() +
geom_point(data = b10, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))+
labs(x = "Total Wins",
y = "Assist to turnover ratio",
title = "2022-23 seaosn ator",
caption = "Source: Sports Reference | Chart by Dylan Manfre")
ggplot() +
geom_point(data = p5_teams, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))+
labs(x = "Total Wins",
y = "Assist to turnover ratio",
title = "2022-23 seaosn ator",
caption = "Source: Sports Reference | Chart by Dylan Manfre")
p5_teams <- season_ator %>%
filter(Conference %in% power_5, Season == "2022-2023")
ggplot() +
geom_point(data = p5_teams, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))+
labs(x = "Total Wins",
y = "Assist to turnover ratio",
title = "2022-23 seaosn ator",
caption = "Source: Sports Reference | Chart by Dylan Manfre")
ggplot() +
geom_point(data = p5_teams, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))+
labs(x = "Total Wins",
y = "Assist to turnover ratio",
title = "2022-23 seaosn ator",
subtitle = "Shows all p5 ators from last season with b10 teams labeled",
caption = "Source: Sports Reference | Chart by Dylan Manfre")
logs18_24 %>%
get_dupes(Date, TeamFull)
dupes <- logs18_24 %>%
get_dupes(Date, TeamFull)
view(dupes)
dupes$Date <- ifelse(dupes$Date == "2019-11-24",
ifelse(dupes$Team == "Oregon Ducks",
ifelse(dupes$Opponent == "Oklahoma State",
"2019-11-28",
dupes$Date),
dupes$Date),
dupes$Date)
View(dupes)
dupes$Date <- ifelse(dupes$Date == "2019-11-24",
ifelse(dupes$TeamFull == "Oregon Ducks",
ifelse(dupes$Opponent == "Oklahoma State",
"2019-11-28",
dupes$Date),
dupes$Date),
dupes$Date)
dupes$Date <- ifelse(dupes$Date == "2019-11-24",
ifelse(dupes$TeamFull == "American Eagles",
ifelse(dupes$Opponent == "Hawaii",
"2019-11-23",
dupes$Date),
dupes$Date),
dupes$Date)
dupes$Date <- ifelse(dupes$Date == "2018-11-24",
ifelse(dupes$TeamFull == "American Eagles",
ifelse(dupes$Opponent == "Hawaii",
"2019-11-23",
dupes$Date),
dupes$Date),
dupes$Date)
dupes$Date <- ifelse(dupes$Date == "2018-11-24",
ifelse(dupes$TeamFull == "Hawaii Rainbow Warriors",
ifelse(dupes$Opponent == "American",
"2018-11-23",
dupes$Date),
dupes$Date),
dupes$Date)
dupes$Date <- ifelse(dupes$Date == "2023-01-25",
ifelse(dupes$TeamFull == "Chicago State Cougars",
ifelse(dupes$Opponent == "St. Francis (IL)",
"2023-01-24",
dupes$Date),
dupes$Date),
dupes$Date)
# changing the dates in the eight dupes
dupes$Date <- ifelse(dupes$Date == "2019-11-24" & dupes$TeamFull == "Oregon Ducks" & dupes$Opponent == "Oklahoma State", "2019-11-28",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "American Eagles" & dupes$Opponent == "Hawaii", "2019-11-23",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "Hawaii Rainbow Warriors" & dupes$Opponent == "American", "2018-11-23",
ifelse(dupes$Date == "2023-01-25" & dupes$TeamFull == "Chicago State Cougars" & dupes$Opponent == "St. Francis (IL)", "2023-01-24",
dupes$Date))))
# changing the dates in the eight dupes
logs18_24$Date <- ifelse(dupes$Date == "2019-11-24" & dupes$TeamFull == "Oregon Ducks" & dupes$Opponent == "Oklahoma State", "2019-11-28",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "American Eagles" & dupes$Opponent == "Hawaii", "2019-11-23",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "Hawaii Rainbow Warriors" & dupes$Opponent == "American", "2018-11-23",
ifelse(dupes$Date == "2023-01-25" & dupes$TeamFull == "Chicago State Cougars" & dupes$Opponent == "St. Francis (IL)", "2023-01-24",
dupes$Date))))
# changing the dates in the eight dupes
logs18_24$Date <- ifelse(dupes$Date == "2019-11-24" & dupes$TeamFull == "Oregon Ducks" & dupes$Opponent == "Oklahoma State", "2019-11-28",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "American Eagles" & dupes$Opponent == "Hawaii", "2019-11-23",
ifelse(dupes$Date == "2018-11-24" & dupes$TeamFull == "Hawaii Rainbow Warriors" & dupes$Opponent == "American", "2018-11-23",
ifelse(dupes$Date == "2023-01-25" & dupes$TeamFull == "Chicago State Cougars" & dupes$Opponent == "St. Francis (IL)", "2023-01-24",
dupes$Date))))
# changing the dates in the eight dupes
logs18_24$Date <- ifelse(logs18_24$Date == "2019-11-24" & logs18_24$TeamFull == "Oregon Ducks" & logs18_24$Opponent == "Oklahoma State", "2019-11-28",
ifelse(logs18_24$Date == "2018-11-24" & logs18_24$TeamFull == "American Eagles" & logs18_24$Opponent == "Hawaii", "2019-11-23",
ifelse(logs18_24$Date == "2018-11-24" & logs18_24$TeamFull == "Hawaii Rainbow Warriors" & logs18_24$Opponent == "American", "2018-11-23",
ifelse(logs18_24$Date == "2023-01-25" & logs18_24$TeamFull == "Chicago State Cougars" & logs18_24$Opponent == "St. Francis (IL)", "2023-01-24",
logs18_24$Date
)
)
)
)
logs18_24 %>%
get_dupes(Date, TeamFull)
view(dupes)
logs18_24 %>%
get_dupes(Date, TeamFull)
library(tidyverse)
library(ggrepel)
library(janitor)
logs18_24 <- read.csv("https://thescoop.org/sports-data-files/wbblogs1824.csv")
#62,584 records ovver 2018-present
power_5 <- c("ACC", "Big 12", "Big Ten", "Pac-12", "SEC")
#Getting rid of records where an ator cannot be generated
logs18_24 <- logs18_24 %>%
filter(!is.na(TeamAssists) & !is.na(TeamTurnovers) & !is.na(OpponentAssists) & !is.na(OpponentTurnovers))
dupes <- logs18_24 %>%
get_dupes(Date, TeamFull)
view(dupes)
# changing the dates in the eight dupes
logs18_24$Date <- ifelse(logs18_24$Date == "2019-11-24" & logs18_24$TeamFull == "Oregon Ducks" & logs18_24$Opponent == "Oklahoma State", "2019-11-28",
ifelse(logs18_24$Date == "2018-11-24" & logs18_24$TeamFull == "American Eagles" & logs18_24$Opponent == "Hawaii", "2019-11-23",
ifelse(logs18_24$Date == "2018-11-24" & logs18_24$TeamFull == "Hawaii Rainbow Warriors" & logs18_24$Opponent == "American", "2018-11-23",
ifelse(logs18_24$Date == "2023-01-25" & logs18_24$TeamFull == "Chicago State Cougars" & logs18_24$Opponent == "St. Francis (IL)", "2023-01-24", logs18_24$Date))))
#checking the new dupes
logs18_24 %>%
get_dupes(Date, TeamFull)
view(dupes)
logs18_24 <- logs18_24 %>%
mutate(
winloss = case_when(
grepl("W", W_L) ~ 1,
grepl("L", W_L) ~ 0),
team_ator = (TeamAssists) / (TeamTurnovers),
opp_ator = (OpponentAssists) / (OpponentTurnovers),
pts_diff = TeamScore - OpponentScore)
logs18_24$Conference <- sub(" WBB", "", logs18_24$Conference)
ator_only <- logs18_24 %>%
select(Season, Date, TeamFull, Conference, Opponent, TeamScore, OpponentScore, winloss, pts_diff, TeamAssists, TeamTurnovers, OpponentAssists, OpponentTurnovers, team_ator, opp_ator)
season_ator <- ator_only %>%
group_by(Season, TeamFull, Conference) %>%
summarize(season_team_ator = sum(TeamAssists)/sum(TeamTurnovers),
season_opp_ator = sum(OpponentAssists)/sum(OpponentTurnovers),
total_wins = sum(winloss)
)
ator_only %>%
filter(TeamFull == "Rider Broncs")
# To filter for a specific team, inster this: filter(TeamFull == "team_name")
#filtering for the ators I want
p5_teams <- season_ator %>%
filter(Conference %in% power_5, Season == "2022-2023")
b10 <- season_ator %>%
filter(Conference == "Big Ten", Season == "2022-2023")
umd <- ator_only %>%
filter(TeamFull == "Maryland Terrapins")
ggplot() +
geom_point(data = p5_teams, aes(x = total_wins, y = season_team_ator))+
geom_text_repel(data = b10, aes(x = total_wins, y = season_team_ator, label = TeamFull))+
labs(x = "Total Wins",
y = "Assist to turnover ratio",
title = "2022-23 seaosn ator",
subtitle = "Shows all p5 ators from last season with b10 teams labeled",
caption = "Source: Sports Reference | Chart by Dylan Manfre")
ator_only %>%
filter(TeamFull == "Maryland Terrapins")
View(ator_only)
View(p5_teams)
ator_only %>%
group_by(Conference) %>%
summarise(ator = sum(TeamAssists)/sum(TeamTurnovers))
ator_only %>%
filter(Conference %in% power_5) %>%
group_by(Conference) %>%
summarise(ator = sum(TeamAssists)/sum(TeamTurnovers))
ator_only %>%
filter(Season, Conference %in% power_5) %>%
group_by(Conference) %>%
summarise(ator = sum(TeamAssists)/sum(TeamTurnovers))
ator_only %>%
filter(Conference %in% power_5) %>%
group_by(Season, Conference) %>%
summarise(ator = sum(TeamAssists)/sum(TeamTurnovers))
ator_only %>%
filter(Conference %in% power_5) %>%
group_by(Season, Conference) %>%
summarise(conf_ator = sum(TeamAssists)/sum(TeamTurnovers))
tenn_url <- "https://utsports.com/sports/womens-basketball/stats/2022-23"
# read in the html and extract all the tables
results <- tenn_url |>
read_html() |>
html_table()
#libraries
library(tidyverse)
library(lubridate)
library(janitor)
library(ggplot2)
#install.packages("ggrepel")
library(ggrepel)
library(rvest)
#Tenn player scrapping. Copied from the 772 book.
tenn_url <- "https://utsports.com/sports/womens-basketball/stats/2022-23"
# read in the html and extract all the tables
results <- tenn_url |>
read_html() |>
html_table()
results <- results[[22]]
tenn_playrs <- results %>%
clean_names()
View(tenn_playrs)
library(cfbfasta)
library(cfbfastR)
install.packages("cfbfastR")
library(cfbfastR)
transfers <- cfbd_recruiting_transfer_portal(2023, 2022, 2021, 2020)
transfers <- cfbd_recruiting_transfer_portal(2023, 2022)
transfers <- cfbd_recruiting_transfer_portal(2023)
View(transfers)
transfers <- cfbd_recruiting_transfer_portal(2022)
View(transfers)
transfers <- cfbd_recruiting_transfer_portal(2020)
transfers <- cfbd_recruiting_transfer_portal(2020)
transfers <- cfbd_recruiting_transfer_portal(2019)
transfers <- cfbd_recruiting_transfer_portal(2019)
transfers <- cfbd_recruiting_transfer_portal(2019)
```{r}
transfers <- cfbd_recruiting_transfer_portal(2018)
transfers <- cfbd_recruiting_transfer_portal(2023)
transfers <- cfbd_recruiting_transfer_portal(2022)
transfers <- cfbd_recruiting_transfer_portal(2021)
transfers <- cfbd_recruiting_transfer_portal(2020)
transfers <- cfbd_recruiting_transfer_portal(2023)
transf %>% filter(is.na(destination))
transfers %>% filter(is.na(destination))
transfers %>%
distinct(eligibility)
transfers %>% filter(!is.na(destination))
transfers <- transfers %>% filter(!is.na(destination))
transfers %>%
group_by(origin) %>%
summarize(numb_transfers = sum(origin))
transfers %>%
group_by(origin) %>%
summarize(numb_transfers = n())
transfers %>%
filter(season == 2023) %>%
group_by(origin) %>%
summarize(numb_transfers = n()) %>%
arrange(desc(numb_transfers))
transfers %>%
filter(transfer_date > "2023-01-01") %>%
group_by(origin) %>%
summarize(numb_transfers = n()) %>%
arrange(desc(numb_transfers))
transfers %>%
filter(transfer_date > "2023-01-01")
transfers %>%
filter(transfer_date > "2023-01-01") %>%
group_by(origin) %>%
summarize(numb_transfers = n()) %>%
arrange(desc(numb_transfers))
transfers %>%
filter(origin == "Maryland") %>%
group_by(origin) %>%
summarize(numb_transfers = n()) %>%
arrange(desc(numb_transfers))
transfers %>%
filter(origin == "Maryland")
transfers <- cfbd_recruiting_transfer_portal(2023)
transfers %>%
filter(origin == "Maryland")
logs18_24 %>%
get_dupes(Date, TeamFull)
view(dupes)
